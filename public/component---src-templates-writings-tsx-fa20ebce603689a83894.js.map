{"version":3,"sources":["webpack:///./src/components/shared/tags.tsx","webpack:///./src/templates/writings.tsx"],"names":["theme","colors","TagDivs","tags","map","t","idx","key","NumberedList","styled","ul","NavNumberedLi","li","NavNumberedListLink","Link","Writings","props","useContext","ThemeContext","data","pageContext","numPages","currentPage","isFirst","isLast","prevPage","toString","nextPage","posts","allMarkdownRemark","edges","location","title","edge","node","frontmatter","date","id","slug","fields","blogPath","split","formattedDate","Date","toDateString","to","Array","from","length","_","i"],"mappings":"8FAAA,iDAKmBA,IAAXC,OAUOC,IARgB,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KAAMH,EAAY,EAAZA,MACtC,OAAQ,oCACLG,GAAQA,EAAKC,KAAI,SAACC,EAAWC,GAAZ,OAChB,kBAAC,IAAD,CAAKC,IAAKD,EAAKN,MAAOA,GAAQK,S,oCCVpC,oHAgBMG,EAAeC,IAAOC,GAAV,6EAAGD,CAAH,wIAUZE,EAAgBF,IAAOG,GAAV,8EAAGH,CAAH,MAEbI,EAAsBJ,YAAOK,QAAV,oFAAGL,CAAH,wCA2EVM,UArE8B,SAACC,GAAU,IAC9ChB,EAAUiB,qBAAWC,gBAArBlB,MACAmB,EAASH,EAATG,KAF8C,EAGpBH,EAAMI,YAAhCC,EAH8C,EAG9CA,SAAUC,EAHoC,EAGpCA,YACZC,EAA0B,IAAhBD,EACVE,EAASF,IAAgBD,EACzBI,EAAWH,EAAc,GAAM,EAAI,YAAxB,cAAoDA,EAAc,GAAGI,WAChFC,EAAW,cAAcL,EAAc,GAAGI,WAC1CE,EAAQT,EAAKU,kBAAkBC,MACrC,OACE,kBAAC,IAAD,CAAQC,SAAUf,EAAMe,UACtB,kBAAC,IAAD,CAAKC,MAAM,uBACX,kBAAC,IAAD,uBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGJ,EAAMxB,KAAI,SAAC6B,GAAc,MACMA,EAAKC,MAAQD,EAAKC,KAAKC,YAA7CH,EADgB,EAChBA,MAAOI,EADS,EACTA,KAAMjC,EADG,EACHA,KACfkC,EAAKJ,EAAKC,KAAKG,GACfC,EAAOL,EAAKC,KAAKK,OAAOD,KAExBE,EAAW,SADNJ,EAAKK,MAAM,KAAK,GACb,IAAkBH,EAC5BI,EAAwB,GACxBN,IAEFM,EADgB,IAAIC,KAAKP,GACDQ,gBAE1B,OACE,kBAAC,IAAD,CAAcrC,IAAK8B,GACjB,kBAAC,OAAD,CACEQ,GAAIL,GAEJ,kBAAC,IAAD,KAAcR,GACd,2BAAIU,GACJ,kBAAC,IAAD,CAASvC,KAAMA,EAAMH,MAAOA,SAKpC,kBAACQ,EAAD,MACEe,GACA,kBAACV,EAAD,CAAqBgC,GAAIpB,GAAzB,cAIDqB,MAAMC,KAAK,CAAEC,OAAQ3B,IAAY,SAAC4B,EAAGC,GAAJ,OAChC,kBAACvC,EAAD,CACEJ,IAAG,qBAAsB2C,EAAE,IAE3B,kBAACrC,EAAD,CACEgC,GAAE,cAAmB,IAAJK,EAAQ,GAAKA,EAAE,IAE/BA,EAAE,QAIP1B,GACA,kBAACX,EAAD,CAAqBgC,GAAIlB,GAAzB","file":"component---src-templates-writings-tsx-fa20ebce603689a83894.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { theme } from '../../styles';\nimport { Tag } from './sharedStyles';\n\nconst { colors } = theme;\n\nconst TagDivs: React.FC<any> = ({ tags, theme }) => {\n  return (<>\n    {tags && tags.map((t: string, idx: number) => (\n      <Tag key={idx} theme={theme}>{t}</Tag>\n    ))}\n  </>);\n};\n\nexport default TagDivs;","import React, { useContext } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { ThemeContext } from '../context/theme';\nimport { PageContextProps } from '@types';\nimport TagDivs from '../components/shared/tags';\nimport { \n  BodyContainer,\n  ListContainer,\n  BlogPostCard,\n  TitleH3,\n  TitleH3Link\n} from '../components/shared/sharedStyles';\n\nconst NumberedList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n`;\n\nconst NavNumberedLi = styled.li``;\n\nconst NavNumberedListLink = styled(Link)`\n  :hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Writings: React.FC<PageContextProps> = (props) => {\n  const { theme } = useContext(ThemeContext);\n  const { data } = props;\n  const { numPages, currentPage } = props.pageContext;\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/writings' : `/writings/${(currentPage - 1).toString()}`;\n  const nextPage = `/writings/${(currentPage + 1).toString()}`;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout location={props.location}>\n      <SEO title=\"List of blog posts\" />\n      <TitleH3>All blog posts</TitleH3>\n      <BodyContainer>\n        <ListContainer>\n          {posts.map((edge: any) => {\n            const { title, date, tags } = edge.node && edge.node.frontmatter;\n            const id = edge.node.id;\n            const slug = edge.node.fields.slug;\n            const yr = date.split(\"-\")[0];\n            const blogPath = `/blog/${yr}/${slug}`;\n            let formattedDate: string = '';\n            if (date) {\n              const dateObj = new Date(date);\n              formattedDate = dateObj.toDateString();\n            }\n            return (\n              <BlogPostCard key={id}>\n                <Link\n                  to={blogPath}\n                >\n                  <TitleH3Link>{title}</TitleH3Link>\n                  <p>{formattedDate}</p>\n                  <TagDivs tags={tags} theme={theme}/>\n                </Link>\n              </BlogPostCard>\n            )\n          })}\n          <NumberedList>\n          {!isFirst && \n            <NavNumberedListLink to={prevPage}>\n              ← Previous\n            </NavNumberedListLink>\n          }\n          {Array.from({ length: numPages }, (_, i) => (\n            <NavNumberedLi\n              key={`paginated-number-${i+1}`}\n            >\n              <NavNumberedListLink\n                to={`/writings/${i===0 ? '' : i+1}`}\n              >\n                {i+1}\n              </NavNumberedListLink>\n            </NavNumberedLi>\n          ))}\n          {!isLast &&\n            <NavNumberedListLink to={nextPage}>\n              Next →\n            </NavNumberedListLink>\n          }\n          </NumberedList>\n\n\n        </ListContainer>\n      </BodyContainer>\n    </Layout>\n  );\n};\n\nexport default Writings;\n\nexport const writingsListQuery = graphql`\n    query writingsListQuery($skip: Int!, $limit: Int!) {\n      allMarkdownRemark (\n        filter: { \n          fields: {\n            slug: {\n              nin: [\"about\", \"resume\"]\n            }\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: $limit\n        skip: $skip\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n              tags\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `;\n"],"sourceRoot":""}