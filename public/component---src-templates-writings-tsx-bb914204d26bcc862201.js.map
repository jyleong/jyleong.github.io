{"version":3,"sources":["webpack:///./src/templates/writings.tsx"],"names":["TitleH1","styled","h1","theme","fontSizes","xlarge","TitleH3","h3","mixins","inlineLink","BodyContainer","div","flexCenter","ListContainer","BlogPostCard","divShadow","NumberedList","ul","NavNumberedLi","li","NavNumberedListLink","Link","Writings","props","data","pageContext","numPages","currentPage","isFirst","isLast","prevPage","toString","nextPage","posts","allMarkdownRemark","edges","location","title","map","edge","node","frontmatter","date","id","slug","fields","blogPath","split","formattedDate","Date","toDateString","key","to","Array","from","length","_","i"],"mappings":"6FAAA,4FAQMA,EAAUC,IAAOC,GAAV,wEAAGD,CAAH,qCAEEE,IAAMC,UAAUC,QAGzBC,EAAUL,IAAOM,GAAV,wEAAGN,CAAH,SACTO,IAAOC,YAILC,EAAgBT,IAAOU,IAAV,8EAAGV,CAAH,SACfO,IAAOI,YAGLC,EAAgBZ,IAAOU,IAAV,8EAAGV,CAAH,gBAIba,EAAeb,IAAOU,IAAV,6EAAGV,CAAH,SACdO,IAAOO,WAGLC,EAAef,IAAOgB,GAAV,6EAAGhB,CAAH,wIAUZiB,EAAgBjB,IAAOkB,GAAV,8EAAGlB,CAAH,MAEbmB,EAAsBnB,YAAOoB,QAAV,oFAAGpB,CAAH,wCA0EVqB,UApE8B,SAACC,GAAU,IAC9CC,EAASD,EAATC,KAD8C,EAEpBD,EAAME,YAAhCC,EAF8C,EAE9CA,SAAUC,EAFoC,EAEpCA,YACZC,EAA0B,IAAhBD,EACVE,EAASF,IAAgBD,EACzBI,EAAWH,EAAc,GAAM,EAAI,YAAxB,cAAoDA,EAAc,GAAGI,WAChFC,EAAW,cAAcL,EAAc,GAAGI,WAC1CE,EAAQT,EAAKU,kBAAkBC,MACrC,OACE,kBAAC,IAAD,CAAQC,SAAUb,EAAMa,UACtB,kBAAC,IAAD,CAAKC,MAAM,uBACX,kBAACrC,EAAD,uBACA,kBAACU,EAAD,KACE,kBAACG,EAAD,KACGoB,EAAMK,KAAI,SAACC,GAAc,MACAA,EAAKC,MAAQD,EAAKC,KAAKC,YAAvCJ,EADgB,EAChBA,MAAOK,EADS,EACTA,KACTC,EAAKJ,EAAKC,KAAKG,GACfC,EAAOL,EAAKC,KAAKK,OAAOD,KAExBE,EAAW,SADNJ,EAAKK,MAAM,KAAK,GACb,IAAkBH,EAE5BI,EAAwB,GAK5B,OAJIN,IAEFM,EADU,IAAIC,KAAKP,GACKQ,gBAGxB,kBAACpC,EAAD,CAAcqC,IAAKR,GACjB,kBAAC,OAAD,CACES,GAAIN,GAEJ,kBAACxC,EAAD,KAAU+B,GACV,2BAAIW,QAKZ,kBAAChC,EAAD,MACEY,GACA,kBAACR,EAAD,CAAqBgC,GAAItB,GAAzB,cAIDuB,MAAMC,KAAK,CAAEC,OAAQ7B,IAAY,SAAC8B,EAAGC,GAAJ,OAChC,kBAACvC,EAAD,CACEiC,IAAG,qBAAsBM,EAAE,IAE3B,kBAACrC,EAAD,CACEgC,GAAE,cAAmB,IAAJK,EAAQ,GAAKA,EAAE,IAE/BA,EAAE,QAIP5B,GACA,kBAACT,EAAD,CAAqBgC,GAAIpB,GAAzB","file":"component---src-templates-writings-tsx-bb914204d26bcc862201.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { theme, mixins } from '../styles';\nimport { PageContextProps } from '../types';\n\nconst TitleH1 = styled.h1`\n  text-align: center;\n  font-size: ${theme.fontSizes.xlarge};\n`;\n\nconst TitleH3 = styled.h3`\n  ${mixins.inlineLink};\n`;\n\n\nconst BodyContainer = styled.div`\n  ${mixins.flexCenter};\n`;\n\nconst ListContainer = styled.div`\n  width: 70%;\n`;\n\nconst BlogPostCard = styled.div`\n  ${mixins.divShadow};\n`;\n\nconst NumberedList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n`;\n\nconst NavNumberedLi = styled.li``;\n\nconst NavNumberedListLink = styled(Link)`\n  :hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Writings: React.FC<PageContextProps> = (props) => {\n  const { data } = props;\n  const { numPages, currentPage } = props.pageContext;\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/writings' : `/writings/${(currentPage - 1).toString()}`;\n  const nextPage = `/writings/${(currentPage + 1).toString()}`;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout location={props.location}>\n      <SEO title=\"List of blog posts\" />\n      <TitleH1>All blog posts</TitleH1>\n      <BodyContainer>\n        <ListContainer>\n          {posts.map((edge: any) => {\n            const { title, date } = edge.node && edge.node.frontmatter;\n            const id = edge.node.id;\n            const slug = edge.node.fields.slug;\n            const yr = date.split(\"-\")[0];\n            const blogPath = `/blog/${yr}/${slug}`;\n            let dateObj: Date;\n            let formattedDate: string = '';\n            if (date) {\n              dateObj = new Date(date);\n              formattedDate = dateObj.toDateString();\n            }\n            return (\n              <BlogPostCard key={id}>\n                <Link\n                  to={blogPath}\n                >\n                  <TitleH3>{title}</TitleH3>\n                  <p>{formattedDate}</p>\n                </Link>\n              </BlogPostCard>\n            )\n          })}\n          <NumberedList>\n          {!isFirst && \n            <NavNumberedListLink to={prevPage}>\n              ← Previous\n            </NavNumberedListLink>\n          }\n          {Array.from({ length: numPages }, (_, i) => (\n            <NavNumberedLi\n              key={`paginated-number-${i+1}`}\n            >\n              <NavNumberedListLink\n                to={`/writings/${i===0 ? '' : i+1}`}\n              >\n                {i+1}\n              </NavNumberedListLink>\n            </NavNumberedLi>\n          ))}\n          {!isLast &&\n            <NavNumberedListLink to={nextPage}>\n              Next →\n            </NavNumberedListLink>\n          }\n          </NumberedList>\n\n\n        </ListContainer>\n      </BodyContainer>\n    </Layout>\n  );\n};\n\nexport default Writings;\n\nexport const writingsListQuery = graphql`\n    query writingsListQuery($skip: Int!, $limit: Int!) {\n      allMarkdownRemark (\n        filter: { \n          fields: {\n            slug: {\n              nin: [\"about\", \"resume\"]\n            }\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: $limit\n        skip: $skip\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `;\n"],"sourceRoot":""}