{"version":3,"sources":["webpack:///./src/components/shared/tags.tsx","webpack:///./src/templates/writings.tsx"],"names":["colors","theme","Tag","styled","div","props","labelGreyishBlue","labelYellow","TagDivs","tags","map","t","idx","key","TitleH1","ThemeStyle","h1","fontSizes","xlarge","TitleH3","h3","mixins","inlineLink","BodyContainer","flexCenter","ListContainer","BlogPostCard","divShadow","NumberedList","ul","NavNumberedLi","li","NavNumberedListLink","Link","Writings","useContext","ThemeContext","data","pageContext","numPages","currentPage","isFirst","isLast","prevPage","toString","nextPage","posts","allMarkdownRemark","edges","location","title","edge","node","frontmatter","date","id","slug","fields","blogPath","split","formattedDate","Date","toDateString","to","Array","from","length","_","i"],"mappings":"6FAAA,qCAIQA,EAJR,UAImBC,EAAXD,OAEFE,EAAMC,IAAOC,IAAV,+DAAGD,CAAH,mFAKa,SAACE,GAAD,MAA2B,SAAhBA,EAAMJ,MAAmBD,EAAOM,iBAAmBN,EAAOO,eAW5EC,IARgB,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KAAMR,EAAY,EAAZA,MACtC,OAAQ,oCACLQ,GAAQA,EAAKC,KAAI,SAACC,EAAWC,GAAZ,OAChB,kBAACV,EAAD,CAAKW,IAAKD,EAAKX,MAAOA,GAAQU,S,oCCjBpC,oHAYMG,GAFaC,IAAXf,OAEQG,IAAOa,GAAV,wEAAGb,CAAH,qCAEEY,IAAWE,UAAUC,SAG9BC,EAAUhB,IAAOiB,GAAV,wEAAGjB,CAAH,SACTkB,IAAOC,YAGLC,EAAgBpB,IAAOC,IAAV,8EAAGD,CAAH,SACfkB,IAAOG,YAGLC,EAAgBtB,IAAOC,IAAV,8EAAGD,CAAH,gBAIbuB,EAAevB,IAAOC,IAAV,6EAAGD,CAAH,SACdkB,IAAOM,WAGLC,EAAezB,IAAO0B,GAAV,6EAAG1B,CAAH,wIAUZ2B,EAAgB3B,IAAO4B,GAAV,8EAAG5B,CAAH,MAEb6B,EAAsB7B,YAAO8B,QAAV,oFAAG9B,CAAH,wCA4EV+B,UAtE8B,SAAC7B,GAAU,IAC9CJ,EAAUkC,qBAAWC,gBAArBnC,MACAoC,EAAShC,EAATgC,KAF8C,EAGpBhC,EAAMiC,YAAhCC,EAH8C,EAG9CA,SAAUC,EAHoC,EAGpCA,YACZC,EAA0B,IAAhBD,EACVE,EAASF,IAAgBD,EACzBI,EAAWH,EAAc,GAAM,EAAI,YAAxB,cAAoDA,EAAc,GAAGI,WAChFC,EAAW,cAAcL,EAAc,GAAGI,WAC1CE,EAAQT,EAAKU,kBAAkBC,MACrC,OACE,kBAAC,IAAD,CAAQC,SAAU5C,EAAM4C,UACtB,kBAAC,IAAD,CAAKC,MAAM,uBACX,kBAACpC,EAAD,uBACA,kBAACS,EAAD,KACE,kBAACE,EAAD,KACGqB,EAAMpC,KAAI,SAACyC,GAAc,MACMA,EAAKC,MAAQD,EAAKC,KAAKC,YAA7CH,EADgB,EAChBA,MAAOI,EADS,EACTA,KAAM7C,EADG,EACHA,KACf8C,EAAKJ,EAAKC,KAAKG,GACfC,EAAOL,EAAKC,KAAKK,OAAOD,KAExBE,EAAW,SADNJ,EAAKK,MAAM,KAAK,GACb,IAAkBH,EAE5BI,EAAwB,GAK5B,OAJIN,IAEFM,EADU,IAAIC,KAAKP,GACKQ,gBAGxB,kBAACpC,EAAD,CAAcb,IAAK0C,GACjB,kBAAC,OAAD,CACEQ,GAAIL,GAEJ,kBAACvC,EAAD,KAAU+B,GACV,2BAAIU,GACJ,kBAAC,IAAD,CAASnD,KAAMA,EAAMR,MAAOA,SAKpC,kBAAC2B,EAAD,MACEa,GACA,kBAACT,EAAD,CAAqB+B,GAAIpB,GAAzB,cAIDqB,MAAMC,KAAK,CAAEC,OAAQ3B,IAAY,SAAC4B,EAAGC,GAAJ,OAChC,kBAACtC,EAAD,CACEjB,IAAG,qBAAsBuD,EAAE,IAE3B,kBAACpC,EAAD,CACE+B,GAAE,cAAmB,IAAJK,EAAQ,GAAKA,EAAE,IAE/BA,EAAE,QAIP1B,GACA,kBAACV,EAAD,CAAqB+B,GAAIlB,GAAzB","file":"component---src-templates-writings-tsx-ee98cecdf768c03f41c0.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { theme } from '../../styles';\n\nconst { colors } = theme;\n\nconst Tag = styled.div`\n  display: inline;\n  margin: 2px;\n  padding: 2px;\n  border-radius: 5px;\n  background-color: ${(props) => props.theme === 'dark' ? colors.labelGreyishBlue : colors.labelYellow};\n`;\n\nconst TagDivs: React.FC<any> = ({ tags, theme }) => {\n  return (<>\n    {tags && tags.map((t: string, idx: number) => (\n      <Tag key={idx} theme={theme}>{t}</Tag>\n    ))}\n  </>);\n};\n\nexport default TagDivs;","import React, { useContext } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { theme as ThemeStyle, mixins } from '../styles';\nimport { ThemeContext } from '../context/theme';\nimport { PageContextProps } from '../types';\nimport TagDivs from '../components/shared/tags';\n\nconst { colors } = ThemeStyle;\n\nconst TitleH1 = styled.h1`\n  text-align: center;\n  font-size: ${ThemeStyle.fontSizes.xlarge};\n`;\n\nconst TitleH3 = styled.h3`\n  ${mixins.inlineLink};\n`;\n\nconst BodyContainer = styled.div`\n  ${mixins.flexCenter};\n`;\n\nconst ListContainer = styled.div`\n  width: 70%;\n`;\n\nconst BlogPostCard = styled.div`\n  ${mixins.divShadow};\n`;\n\nconst NumberedList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n`;\n\nconst NavNumberedLi = styled.li``;\n\nconst NavNumberedListLink = styled(Link)`\n  :hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Writings: React.FC<PageContextProps> = (props) => {\n  const { theme } = useContext(ThemeContext);\n  const { data } = props;\n  const { numPages, currentPage } = props.pageContext;\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/writings' : `/writings/${(currentPage - 1).toString()}`;\n  const nextPage = `/writings/${(currentPage + 1).toString()}`;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout location={props.location}>\n      <SEO title=\"List of blog posts\" />\n      <TitleH1>All blog posts</TitleH1>\n      <BodyContainer>\n        <ListContainer>\n          {posts.map((edge: any) => {\n            const { title, date, tags } = edge.node && edge.node.frontmatter;\n            const id = edge.node.id;\n            const slug = edge.node.fields.slug;\n            const yr = date.split(\"-\")[0];\n            const blogPath = `/blog/${yr}/${slug}`;\n            let dateObj: Date;\n            let formattedDate: string = '';\n            if (date) {\n              dateObj = new Date(date);\n              formattedDate = dateObj.toDateString();\n            }\n            return (\n              <BlogPostCard key={id}>\n                <Link\n                  to={blogPath}\n                >\n                  <TitleH3>{title}</TitleH3>\n                  <p>{formattedDate}</p>\n                  <TagDivs tags={tags} theme={theme}/>\n                </Link>\n              </BlogPostCard>\n            )\n          })}\n          <NumberedList>\n          {!isFirst && \n            <NavNumberedListLink to={prevPage}>\n              ← Previous\n            </NavNumberedListLink>\n          }\n          {Array.from({ length: numPages }, (_, i) => (\n            <NavNumberedLi\n              key={`paginated-number-${i+1}`}\n            >\n              <NavNumberedListLink\n                to={`/writings/${i===0 ? '' : i+1}`}\n              >\n                {i+1}\n              </NavNumberedListLink>\n            </NavNumberedLi>\n          ))}\n          {!isLast &&\n            <NavNumberedListLink to={nextPage}>\n              Next →\n            </NavNumberedListLink>\n          }\n          </NumberedList>\n\n\n        </ListContainer>\n      </BodyContainer>\n    </Layout>\n  );\n};\n\nexport default Writings;\n\nexport const writingsListQuery = graphql`\n    query writingsListQuery($skip: Int!, $limit: Int!) {\n      allMarkdownRemark (\n        filter: { \n          fields: {\n            slug: {\n              nin: [\"about\", \"resume\"]\n            }\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: $limit\n        skip: $skip\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n              tags\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `;\n"],"sourceRoot":""}