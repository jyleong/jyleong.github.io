{"version":3,"sources":["webpack:///./src/components/shared/tags.tsx","webpack:///./src/components/sections/sectionAbout.tsx","webpack:///./src/components/sections/sectionWriting.tsx","webpack:///./src/components/content.tsx","webpack:///./src/pages/index.tsx"],"names":["theme","colors","TagDivs","tags","map","t","idx","key","Description","styled","div","ImageCover","ImageItem","Img","mixins","imageItem","SectionContainer","sectionContainer","flexCenter","SectionAbout","imgQuery","useStaticQuery","id","fluid","placeholderImage","childImageSharp","ThemeStyle","props","secondaryBackgroundDark","secondaryBackground","ListContainer","TitleH2","h2","WritingsLink","Link","inlineLink","SectionWriting","useContext","ThemeContext","posts","p","date","slug","title","blogPath","split","formattedDate","Date","toDateString","to","Content","iEdge","edge","node","frontmatter","fields","IndexPage","pageQuery","location","edges","allMarkdownRemark"],"mappings":"6FAAA,iDAKmBA,IAAXC,OAUOC,IARgB,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KAAMH,EAAY,EAAZA,MACtC,OAAQ,oCACLG,GAAQA,EAAKC,KAAI,SAACC,EAAWC,GAAZ,OAChB,kBAAC,IAAD,CAAKC,IAAKD,EAAKN,MAAOA,GAAQK,S,uICJ9BG,EAAcC,IAAOC,IAAV,4EAAGD,CAAH,8RAkCXE,EAAaF,IAAOC,IAAV,2EAAGD,CAAH,mGAWVG,EAAYH,YAAOI,KAAV,0EAAGJ,CAAH,SACZK,IAAOC,WAGJC,EAAmBP,IAAOC,IAAV,iFAAGD,CAAH,aAClBK,IAAOG,iBACPH,IAAOI,YAiCIC,EA9BgB,WAC7B,IAAMC,EAAWC,yBAAe,cAUhC,OACE,kBAACL,EAAD,CAAkBM,GAAG,SACnB,kBAACd,EAAD,KACE,4JAIA,iDACA,4CAEF,kBAACG,EAAD,KACE,kBAACC,EAAD,CACEW,MAAOH,EAASI,iBAAiBC,gBAAgBF,W,oCCvEnDtB,EAAWyB,IAAXzB,OAEFe,EAAmBP,IAAOC,IAAV,uFAAGD,CAAH,iEAClBK,IAAOG,kBACW,SAACU,GAAD,MAA2B,SAAhBA,EAAM3B,MAAmBC,EAAO2B,wBAA0B3B,EAAO4B,sBAC9Ff,IAAOI,YAKLY,EAAgBrB,IAAOC,IAAV,oFAAGD,CAAH,gCAKbsB,EAAUtB,IAAOuB,GAAV,8EAAGvB,CAAH,mEAOPwB,EAAexB,YAAOyB,QAAV,mFAAGzB,CAAH,2BAEdK,IAAOqB,YAsCIC,EAnCoC,SAACT,GAAU,IACpD3B,EAAUqC,qBAAWC,gBAArBtC,MACR,OACE,kBAAC,EAAD,CAAkBsB,GAAG,UAAUtB,MAAOA,GACpC,kBAAC+B,EAAD,wBACA,kBAACD,EAAD,KACGH,EAAMY,MAAMnC,KAAI,SAACoC,GAAM,IACdlB,EAAgCkB,EAAhClB,GAAImB,EAA4BD,EAA5BC,KAAMC,EAAsBF,EAAtBE,KAAMvC,EAAgBqC,EAAhBrC,KAAMwC,EAAUH,EAAVG,MAExBC,EAAW,SADNH,EAAKI,MAAM,KAAK,GACb,IAAkBH,EAE5BI,EAAwB,GAK5B,OAJIL,IAEFK,EADU,IAAIC,KAAKN,GACKO,gBAGxB,kBAAC,IAAD,CAAczC,IAAKe,GACjB,kBAAC,OAAD,CACE2B,GAAIL,GAEN,kBAAC,IAAD,KAAcD,GACd,2BAAIG,GACJ,kBAAC,IAAD,CAAS3C,KAAMA,EAAMH,MAAOA,UAOpC,kBAACiC,EAAD,CAAcgB,GAAG,cAAjB,oBC7CSC,EAnByB,SAACvB,GAAU,IAE3CY,EADYZ,EAAVwB,MACY/C,KAAI,SAAAgD,GACtB,MAAO,CACLT,MAAOS,EAAKC,KAAKC,YAAYX,MAC7BF,KAAMW,EAAKC,KAAKC,YAAYb,KAC5BtC,KAAMiD,EAAKC,KAAKC,YAAYnD,KAC5BmB,GAAI8B,EAAKC,KAAK/B,GACdoB,KAAMU,EAAKC,KAAKE,OAAOb,SAG3B,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAgBH,MAAOA,M,YC6BdiB,UAxCa,SAAC7B,GAC3B,IAAM8B,EAAYpC,yBAAe,cA6BzBqC,EAAa/B,EAAb+B,SACAC,EAAUF,EAAUG,kBAApBD,MACR,OACE,kBAAC,IAAD,CAAQD,SAAUA,GAChB,kBAAC,IAAD,CAAKf,MAAM,SACX,kBAAC,EAAD,CAASQ,MAAOQ","file":"component---src-pages-index-tsx-ce41a32c88a14a7feebd.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { theme } from '../../styles';\nimport { Tag } from './sharedStyles';\n\nconst { colors } = theme;\n\nconst TagDivs: React.FC<any> = ({ tags, theme }) => {\n  return (<>\n    {tags && tags.map((t: string, idx: number) => (\n      <Tag key={idx} theme={theme}>{t}</Tag>\n    ))}\n  </>);\n};\n\nexport default TagDivs;","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport { mixins } from '@styles';\n\nconst Description = styled.div`\n  display: inline-block;\n  text-align: left;\n\n  h3 {\n    display: block;\n    padding-left: 40px;\n    padding-top: 40px;\n    padding-right: 40px;\n  }\n\n  h4 {\n    display: none;\n  }\n\n  p {\n    padding-left: 40px;\n    font-style: italic;\n  }\n\n  @media (max-width: 768px) {\n    h3 {\n      display: none;\n    }\n\n    h4 {\n      display: block;\n      padding-left: 40px;\n      padding-top: 40px;\n      padding-right: 40px;\n    }\n  }\n`;\n\nconst ImageCover = styled.div`\n  display: inline-block;\n  margin: 20px;\n  width: 50%;\n  height: 50%;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst ImageItem = styled(Img)<{fluid: any}>`\n\t${mixins.imageItem};\n`;\n\nconst SectionContainer = styled.div`\n  ${mixins.sectionContainer};\n  ${mixins.flexCenter};\n`;\n\nconst SectionAbout: React.FC = () => {\n  const imgQuery = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"jamesleong.jpg\"}) {\n        childImageSharp {\n          fluid(maxWidth: 600) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }`);\n  return (\n    <SectionContainer id='about'>\n      <Description>\n        <h3>Hello! I'm James. I write code, \n          but I often ponder about many things. \n          Hence the blog as a means to sort through my thoughts.\n        </h3>\n        <h4>Hello! I'm James.</h4>\n        <p>Memento Mori</p>\n      </Description>\n      <ImageCover>\n        <ImageItem \n          fluid={imgQuery.placeholderImage.childImageSharp.fluid}\n        />\n      </ImageCover>\n    </SectionContainer>\n  );\n};\n\nexport default SectionAbout;\n","import React, { useContext } from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport { theme as ThemeStyle, mixins } from '@styles';\nimport { ThemeContext } from '../../context/theme';\nimport { WritingListProps } from '@types';\nimport TagDivs from '../../components/shared/tags';\nimport {\n  BlogPostCard,\n  TitleH3Link\n} from '../../components/shared/sharedStyles';\n\nconst { colors } = ThemeStyle;\n\nconst SectionContainer = styled.div`\n  ${mixins.sectionContainer};\n  background-color: ${(props) => props.theme === 'dark' ? colors.secondaryBackgroundDark : colors.secondaryBackground };\n  ${mixins.flexCenter};\n  display: grid;\n  border-radius: 5px;\n`;\n\nconst ListContainer = styled.div`\n  width: 100%;\n  padding: 0.5rem;\n`;\n\nconst TitleH2 = styled.h2`\n  text-align: center;\n  width: 100%;\n  position: relative;\n  display: block;\n`;\n\nconst WritingsLink = styled(Link)`\n  text-align: center;\n  ${mixins.inlineLink};\n`;\n\nconst SectionWriting: React.FC<WritingListProps> = (props) => {\n  const { theme } = useContext(ThemeContext);\n  return (\n    <SectionContainer id='writing' theme={theme}>\n      <TitleH2>Recent Writings</TitleH2>\n      <ListContainer>\n        {props.posts.map((p) => {\n          const { id, date, slug, tags, title } = p;\n          const yr = date.split(\"-\")[0];\n          const blogPath = `/blog/${yr}/${slug}`;\n          let dateObj: Date;\n          let formattedDate: string = '';\n          if (date) {\n            dateObj = new Date(date);\n            formattedDate = dateObj.toDateString();\n          }\n          return (\n            <BlogPostCard key={id}>\n              <Link\n                to={blogPath}\n              >\n              <TitleH3Link>{title}</TitleH3Link>\n              <p>{formattedDate}</p>\n              <TagDivs tags={tags} theme={theme}/>\n              </Link>\n            </BlogPostCard>\n          )\n        })}\n      </ListContainer>\n\n      <WritingsLink to='/writings/'>More writing âž¤</WritingsLink>\n    </SectionContainer>\n  );\n};\n\nexport default SectionWriting;\n","import React from 'react';\n\nimport { SectionAbout, SectionWriting } from './sections';\nimport { ContentProps } from '@types';\n\nconst Content: React.FC<ContentProps> = (props) => {\n  const { iEdge } = props;\n  const posts = iEdge.map(edge => {\n    return {\n      title: edge.node.frontmatter.title,\n      date: edge.node.frontmatter.date,\n      tags: edge.node.frontmatter.tags,\n      id: edge.node.id,\n      slug: edge.node.fields.slug,\n    }\n  });\n  return (\n    <div>\n      <SectionAbout />\n      <SectionWriting posts={posts}/>\n    </div>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Content from '../components/content';\nimport SEO from '../components/seo';\n\n\nconst IndexPage: React.FC = (props: any) => {\n  const pageQuery = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark (\n        filter: { \n          fields: {\n            slug: {\n              nin: [\"about\", \"resume\"]\n            }\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: 4\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n              tags\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n  const { location } = props;\n  const { edges } = pageQuery.allMarkdownRemark;\n  return(\n    <Layout location={location}>\n      <SEO title='Home' />\n      <Content iEdge={edges}/>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}