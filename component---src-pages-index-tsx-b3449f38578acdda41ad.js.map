{"version":3,"sources":["webpack:///./src/components/sections/sectionAbout.tsx","webpack:///./src/components/sections/sectionWriting.tsx","webpack:///./src/components/content.tsx","webpack:///./src/pages/index.tsx"],"names":["Description","styled","div","theme","colors","primaryGray","ImageCover","ImageItem","Img","mixins","imageItem","SectionContainer","sectionContainer","flexCenter","SectionAbout","imgQuery","useStaticQuery","id","fluid","placeholderImage","childImageSharp","secondaryBackground","ListContainer","BlogPostCard","divShadow","TitleH2","h2","TitleH3","h3","inlineLink","WritingsLink","Link","SectionWriting","props","posts","map","p","date","slug","title","blogPath","split","formattedDate","Date","toDateString","key","to","Content","iEdge","edge","node","frontmatter","fields","IndexPage","pageQuery","location","edges","allMarkdownRemark"],"mappings":"gMAMMA,EAAcC,IAAOC,IAAV,4EAAGD,CAAH,qJAIJE,IAAMC,OAAOC,aAWpBC,EAAaL,IAAOC,IAAV,2EAAGD,CAAH,4DAOVM,EAAYN,YAAOO,KAAV,0EAAGP,CAAH,SACZQ,IAAOC,WAGJC,EAAmBV,IAAOC,IAAV,iFAAGD,CAAH,aAClBQ,IAAOG,iBACPH,IAAOI,YAgCIC,EA7BgB,WAC7B,IAAMC,EAAWC,yBAAe,cAUhC,OACE,kBAACL,EAAD,CAAkBM,GAAG,SACnB,kBAACjB,EAAD,KACE,4JAIA,4CAEF,kBAACM,EAAD,KACE,kBAACC,EAAD,CACEW,MAAOH,EAASI,iBAAiBC,gBAAgBF,WC5CrDP,EAAmBV,IAAOC,IAAV,uFAAGD,CAAH,iEAClBQ,IAAOG,iBACWT,IAAMC,OAAOiB,oBAC/BZ,IAAOI,YAKLS,EAAgBrB,IAAOC,IAAV,oFAAGD,CAAH,gCAKbsB,EAAetB,IAAOC,IAAV,mFAAGD,CAAH,SACdQ,IAAOe,WAGLC,EAAUxB,IAAOyB,GAAV,8EAAGzB,CAAH,mEAOP0B,EAAU1B,IAAO2B,GAAV,8EAAG3B,CAAH,SACTQ,IAAOoB,YAGLC,EAAe7B,YAAO8B,QAAV,mFAAG9B,CAAH,2BAEdQ,IAAOoB,YAoCIG,EAjCoC,SAACC,GAClD,OACE,kBAAC,EAAD,CAAkBhB,GAAG,WACnB,kBAACQ,EAAD,wBACA,kBAACH,EAAD,KACGW,EAAMC,MAAMC,KAAI,SAACC,GAAM,IACdnB,EAA0BmB,EAA1BnB,GAAIoB,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAElBC,EAAW,SADNH,EAAKI,MAAM,KAAK,GACb,IAAkBH,EAE5BI,EAAwB,GAK5B,OAJIL,IAEFK,EADU,IAAIC,KAAKN,GACKO,gBAGxB,kBAACrB,EAAD,CAAcsB,IAAK5B,GACjB,kBAAC,OAAD,CACE6B,GAAIN,GAEN,kBAACb,EAAD,KAAUY,GACV,2BAAIG,SAOZ,kBAACZ,EAAD,CAAcgB,GAAG,cAAjB,oBCvCSC,EAlByB,SAACd,GAAU,IAE3CC,EADYD,EAAVe,MACYb,KAAI,SAAAc,GACtB,MAAO,CACLV,MAAOU,EAAKC,KAAKC,YAAYZ,MAC7BF,KAAMY,EAAKC,KAAKC,YAAYd,KAC5BpB,GAAIgC,EAAKC,KAAKjC,GACdqB,KAAMW,EAAKC,KAAKE,OAAOd,SAG3B,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAgBJ,MAAOA,M,YCedmB,UAvCa,SAACpB,GAC3B,IAAMqB,EAAYtC,yBAAe,cA4BzBuC,EAAatB,EAAbsB,SACAC,EAAUF,EAAUG,kBAApBD,MACR,OACE,kBAAC,IAAD,CAAQD,SAAUA,GAChB,kBAAC,IAAD,CAAKhB,MAAM,SACX,kBAAC,EAAD,CAASS,MAAOQ","file":"component---src-pages-index-tsx-b3449f38578acdda41ad.js","sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport { theme, mixins } from '../../styles';\n\nconst Description = styled.div`\n  display: inline-block;\n  text-align: left;\n  h3 {\n    color: ${theme.colors.primaryGray};\n    padding-left: 40px;\n    padding-top: 40px;\n    padding-right: 40px;\n  }\n  p {\n    padding-left: 40px;\n    font-style: italic;\n  }\n`;\n\nconst ImageCover = styled.div`\n  display: inline-block;\n  margin: 20px;\n  width: 50%;\n  height: 50%;\n`;\n\nconst ImageItem = styled(Img)<{fluid: any}>`\n\t${mixins.imageItem};\n`;\n\nconst SectionContainer = styled.div`\n  ${mixins.sectionContainer};\n  ${mixins.flexCenter};\n`;\n\nconst SectionAbout: React.FC = () => {\n  const imgQuery = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"jamesleong.jpg\"}) {\n        childImageSharp {\n          fluid(maxWidth: 600) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }`);\n  return (\n    <SectionContainer id='about'>\n      <Description>\n        <h3>Hello! I'm James. I write code, \n          but I often ponder about many things. \n          Hence the blog as a means to sort through my thoughts.\n        </h3>\n        <p>Memento Mori</p>\n      </Description>\n      <ImageCover>\n        <ImageItem \n          fluid={imgQuery.placeholderImage.childImageSharp.fluid}\n        />\n      </ImageCover>\n    </SectionContainer>\n  );\n};\n\nexport default SectionAbout;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport { theme, mixins } from '../../styles';\n\ninterface BlogPost {\n  title: string,\n  date: string,\n  id: string,\n  slug: string,\n}\ninterface WritingListProps {\n  posts: BlogPost[]\n}\n\nconst SectionContainer = styled.div`\n  ${mixins.sectionContainer};\n  background-color: ${theme.colors.secondaryBackground};\n  ${mixins.flexCenter};\n  display: grid;\n  border-radius: 5px;\n`;\n\nconst ListContainer = styled.div`\n  width: 100%;\n  padding: 0.5rem;\n`;\n\nconst BlogPostCard = styled.div`\n  ${mixins.divShadow};\n`;\n\nconst TitleH2 = styled.h2`\n  text-align: center;\n  width: 100%;\n  position: relative;\n  display: block;\n`;\n\nconst TitleH3 = styled.h3`\n  ${mixins.inlineLink};\n`;\n\nconst WritingsLink = styled(Link)`\n  text-align: center;\n  ${mixins.inlineLink};\n`;\n\nconst SectionWriting: React.FC<WritingListProps> = (props) => {\n  return (\n    <SectionContainer id='writing'>\n      <TitleH2>Recent Writings</TitleH2>\n      <ListContainer>\n        {props.posts.map((p) => {\n          const { id, date, slug, title } = p;\n          const yr = date.split(\"-\")[0];\n          const blogPath = `/blog/${yr}/${slug}`;\n          let dateObj: Date;\n          let formattedDate: string = '';\n          if (date) {\n            dateObj = new Date(date);\n            formattedDate = dateObj.toDateString();\n          }\n          return (\n            <BlogPostCard key={id}>\n              <Link\n                to={blogPath}\n              >\n              <TitleH3>{title}</TitleH3>\n              <p>{formattedDate}</p>\n              </Link>\n            </BlogPostCard>\n          )\n        })}\n      </ListContainer>\n\n      <WritingsLink to='/writings/'>More writing âž¤</WritingsLink>\n    </SectionContainer>\n  );\n};\n\nexport default SectionWriting;\n","import React from 'react';\n\nimport { SectionAbout, SectionWriting } from './sections';\n\ninterface IEdge {\n  node: {\n    id: string,\n    frontmatter: {\n      title: string,\n      date: string,\n    }\n    fields: {\n      slug: string,\n    }\n  }\n}\ninterface ContentProps {\n  iEdge: IEdge[]\n}\nconst Content: React.FC<ContentProps> = (props) => {\n  const { iEdge } = props;\n  const posts = iEdge.map(edge => {\n    return {\n      title: edge.node.frontmatter.title,\n      date: edge.node.frontmatter.date,\n      id: edge.node.id,\n      slug: edge.node.fields.slug,\n    }\n  });\n  return (\n    <div>\n      <SectionAbout />\n      <SectionWriting posts={posts}/>\n    </div>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Content from '../components/content';\nimport SEO from '../components/seo';\n\n\nconst IndexPage: React.FC = (props: any) => {\n  const pageQuery = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark (\n        filter: { \n          fields: {\n            slug: {\n              nin: [\"about\", \"resume\"]\n            }\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: 4\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n  const { location } = props;\n  const { edges } = pageQuery.allMarkdownRemark;\n  return(\n    <Layout location={location}>\n      <SEO title='Home' />\n      <Content iEdge={edges}/>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}