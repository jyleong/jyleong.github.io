{"version":3,"sources":["webpack:///./src/templates/writings.tsx"],"names":["colors","ThemeStyle","TitleH1","styled","h1","fontSizes","xlarge","TitleH3","h3","mixins","inlineLink","BodyContainer","div","flexCenter","ListContainer","BlogPostCard","divShadow","NumberedList","ul","NavNumberedLi","li","NavNumberedListLink","Link","Tag","props","theme","labelMauve","labelGreen","TagDivs","tags","map","t","idx","key","Writings","useContext","ThemeContext","data","pageContext","numPages","currentPage","isFirst","isLast","prevPage","toString","nextPage","posts","allMarkdownRemark","edges","location","title","edge","node","frontmatter","date","id","slug","fields","blogPath","split","formattedDate","Date","toDateString","to","Array","from","length","_","i"],"mappings":"6FAAA,wGASQA,EAAWC,IAAXD,OAEFE,EAAUC,IAAOC,GAAV,wEAAGD,CAAH,qCAEEF,IAAWI,UAAUC,QAG9BC,EAAUJ,IAAOK,GAAV,wEAAGL,CAAH,SACTM,IAAOC,YAGLC,EAAgBR,IAAOS,IAAV,8EAAGT,CAAH,SACfM,IAAOI,YAGLC,EAAgBX,IAAOS,IAAV,8EAAGT,CAAH,gBAIbY,EAAeZ,IAAOS,IAAV,6EAAGT,CAAH,SACdM,IAAOO,WAGLC,EAAed,IAAOe,GAAV,6EAAGf,CAAH,wIAUZgB,EAAgBhB,IAAOiB,GAAV,8EAAGjB,CAAH,MAEbkB,EAAsBlB,YAAOmB,QAAV,oFAAGnB,CAAH,wCAMnBoB,EAAMpB,IAAOS,IAAV,oEAAGT,CAAH,mFAKa,SAACqB,GAAD,MAA2B,SAAhBA,EAAMC,MAAmBzB,EAAO0B,WAAa1B,EAAO2B,cAG/EC,EAAyB,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KAAMJ,EAAY,EAAZA,MACtC,OAAQ,oCACLI,GAAQA,EAAKC,KAAI,SAACC,EAAWC,GAAZ,OAChB,kBAACT,EAAD,CAAKU,IAAKD,EAAKP,MAAOA,GAAQM,QA2ErBG,UAtE8B,SAACV,GAAU,IAC9CC,EAAUU,qBAAWC,gBAArBX,MACAY,EAASb,EAATa,KAF8C,EAGpBb,EAAMc,YAAhCC,EAH8C,EAG9CA,SAAUC,EAHoC,EAGpCA,YACZC,EAA0B,IAAhBD,EACVE,EAASF,IAAgBD,EACzBI,EAAWH,EAAc,GAAM,EAAI,YAAxB,cAAoDA,EAAc,GAAGI,WAChFC,EAAW,cAAcL,EAAc,GAAGI,WAC1CE,EAAQT,EAAKU,kBAAkBC,MACrC,OACE,kBAAC,IAAD,CAAQC,SAAUzB,EAAMyB,UACtB,kBAAC,IAAD,CAAKC,MAAM,uBACX,kBAAChD,EAAD,uBACA,kBAACS,EAAD,KACE,kBAACG,EAAD,KACGgC,EAAMhB,KAAI,SAACqB,GAAc,MACMA,EAAKC,MAAQD,EAAKC,KAAKC,YAA7CH,EADgB,EAChBA,MAAOI,EADS,EACTA,KAAMzB,EADG,EACHA,KACf0B,EAAKJ,EAAKC,KAAKG,GACfC,EAAOL,EAAKC,KAAKK,OAAOD,KAExBE,EAAW,SADNJ,EAAKK,MAAM,KAAK,GACb,IAAkBH,EAE5BI,EAAwB,GAK5B,OAJIN,IAEFM,EADU,IAAIC,KAAKP,GACKQ,gBAGxB,kBAAC/C,EAAD,CAAckB,IAAKsB,GACjB,kBAAC,OAAD,CACEQ,GAAIL,GAEJ,kBAACnD,EAAD,KAAU2C,GACV,2BAAIU,GACJ,kBAAChC,EAAD,CAASC,KAAMA,EAAMJ,MAAOA,SAKpC,kBAACR,EAAD,MACEwB,GACA,kBAACpB,EAAD,CAAqB0C,GAAIpB,GAAzB,cAIDqB,MAAMC,KAAK,CAAEC,OAAQ3B,IAAY,SAAC4B,EAAGC,GAAJ,OAChC,kBAACjD,EAAD,CACEc,IAAG,qBAAsBmC,EAAE,IAE3B,kBAAC/C,EAAD,CACE0C,GAAE,cAAmB,IAAJK,EAAQ,GAAKA,EAAE,IAE/BA,EAAE,QAIP1B,GACA,kBAACrB,EAAD,CAAqB0C,GAAIlB,GAAzB","file":"component---src-templates-writings-tsx-166072edd8cbcd5a86fe.js","sourcesContent":["import React, { useContext } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { theme as ThemeStyle, mixins } from '../styles';\nimport { ThemeContext } from '../context/theme';\nimport { PageContextProps } from '../types';\n\nconst { colors } = ThemeStyle;\n\nconst TitleH1 = styled.h1`\n  text-align: center;\n  font-size: ${ThemeStyle.fontSizes.xlarge};\n`;\n\nconst TitleH3 = styled.h3`\n  ${mixins.inlineLink};\n`;\n\nconst BodyContainer = styled.div`\n  ${mixins.flexCenter};\n`;\n\nconst ListContainer = styled.div`\n  width: 70%;\n`;\n\nconst BlogPostCard = styled.div`\n  ${mixins.divShadow};\n`;\n\nconst NumberedList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n`;\n\nconst NavNumberedLi = styled.li``;\n\nconst NavNumberedListLink = styled(Link)`\n  :hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Tag = styled.div`\n  display: inline;\n  margin: 2px;\n  padding: 2px;\n  border-radius: 5px;\n  background-color: ${(props) => props.theme === 'dark' ? colors.labelMauve : colors.labelGreen};\n`;\n\nconst TagDivs: React.FC<any> = ({ tags, theme }) => {\n  return (<>\n    {tags && tags.map((t: string, idx: number) => (\n      <Tag key={idx} theme={theme}>{t}</Tag>\n    ))}\n  </>)\n}\n\nconst Writings: React.FC<PageContextProps> = (props) => {\n  const { theme } = useContext(ThemeContext);\n  const { data } = props;\n  const { numPages, currentPage } = props.pageContext;\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/writings' : `/writings/${(currentPage - 1).toString()}`;\n  const nextPage = `/writings/${(currentPage + 1).toString()}`;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout location={props.location}>\n      <SEO title=\"List of blog posts\" />\n      <TitleH1>All blog posts</TitleH1>\n      <BodyContainer>\n        <ListContainer>\n          {posts.map((edge: any) => {\n            const { title, date, tags } = edge.node && edge.node.frontmatter;\n            const id = edge.node.id;\n            const slug = edge.node.fields.slug;\n            const yr = date.split(\"-\")[0];\n            const blogPath = `/blog/${yr}/${slug}`;\n            let dateObj: Date;\n            let formattedDate: string = '';\n            if (date) {\n              dateObj = new Date(date);\n              formattedDate = dateObj.toDateString();\n            }\n            return (\n              <BlogPostCard key={id}>\n                <Link\n                  to={blogPath}\n                >\n                  <TitleH3>{title}</TitleH3>\n                  <p>{formattedDate}</p>\n                  <TagDivs tags={tags} theme={theme}/>\n                </Link>\n              </BlogPostCard>\n            )\n          })}\n          <NumberedList>\n          {!isFirst && \n            <NavNumberedListLink to={prevPage}>\n              ← Previous\n            </NavNumberedListLink>\n          }\n          {Array.from({ length: numPages }, (_, i) => (\n            <NavNumberedLi\n              key={`paginated-number-${i+1}`}\n            >\n              <NavNumberedListLink\n                to={`/writings/${i===0 ? '' : i+1}`}\n              >\n                {i+1}\n              </NavNumberedListLink>\n            </NavNumberedLi>\n          ))}\n          {!isLast &&\n            <NavNumberedListLink to={nextPage}>\n              Next →\n            </NavNumberedListLink>\n          }\n          </NumberedList>\n\n\n        </ListContainer>\n      </BodyContainer>\n    </Layout>\n  );\n};\n\nexport default Writings;\n\nexport const writingsListQuery = graphql`\n    query writingsListQuery($skip: Int!, $limit: Int!) {\n      allMarkdownRemark (\n        filter: { \n          fields: {\n            slug: {\n              nin: [\"about\", \"resume\"]\n            }\n          }\n        }\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: $limit\n        skip: $skip\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n              tags\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `;\n"],"sourceRoot":""}